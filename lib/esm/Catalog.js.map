{"version":3,"file":"Catalog.js","names":["QueryEngineRecursive","require","QueryEngine","Catalog","constructor","session","url","fetch","accessService","AccessService","dataService","DataService","queryEngineRecursive","queryEngine","checkExistence","status","method","then","result","create","makePublic","triples","data","DCAT","Dataset","triple","o","object","startsWith","predicate","writeFileToPod","Buffer","from","addMetadata","query","subject","update","getContainment","as","recursive","Promise","resolve","reject","getContainerStructure","LDP","contains","dataset","error","engine","queryStart","distribution","downloadURL","quadStream","queryQuads","sources","lenient","textStream","rdfSerializer","serialize","contentType","asTtl","stringifyStream","addDataset","datasetUrl","deleteDataset","addDistribution","distributionUrl","deleteDistribution","delete","deleteFile","sparqlUpdate"],"sources":["../../src/Catalog.ts"],"sourcesContent":["import AccessService from \"./helpers/access-service\";\r\nimport DataService from \"./helpers/data-service\";\r\nimport { QueryEngine } from '@comunica/query-sparql'\r\nimport { ACL, DCAT, DCTERMS, FOAF, RDFS, LDP } from \"@inrupt/vocab-common-rdf\";\r\nimport { Session as BrowserSession } from \"@inrupt/solid-client-authn-browser\";\r\nimport { Session as NodeSession } from \"@inrupt/solid-client-authn-node\";\r\nimport rdfSerializer from 'rdf-serialize';\r\nimport stringifyStream from 'stream-to-string'\r\nimport { metadata, TokenSession } from './helpers/interfaces'\r\n\r\nconst QueryEngineRecursive = require('@comunica/query-sparql-link-traversal').QueryEngine;\r\n\r\nexport class Catalog {\r\n  public fetch;\r\n  public accessService: AccessService;\r\n  public dataService: DataService;\r\n  public projectId: string;\r\n  public url: string;\r\n  public data: object[];\r\n  public session: BrowserSession | NodeSession | TokenSession\r\n  public queryEngineRecursive: any\r\n  public queryEngine: any\r\n\r\n  constructor(session: BrowserSession | NodeSession | TokenSession, url: string) {\r\n    this.session = session\r\n    this.fetch = session.fetch;\r\n    this.url = url\r\n    this.accessService = new AccessService(session.fetch);\r\n    this.dataService = new DataService(session.fetch);\r\n    this.queryEngineRecursive = new QueryEngineRecursive()\r\n    this.queryEngine = new QueryEngine()\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @returns boolean: this catalog exists or not\r\n   */\r\n  public async checkExistence() {\r\n    const status = await this.fetch(this.url, { method: \"HEAD\" }).then(result => result.status)\r\n    if (status === 200) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description create this dataset within the active project\r\n   * @param makePublic initial access rights for the dataset (boolean)\r\n   */\r\n  public async create(makePublic, triples: metadata[] = []) {\r\n    let data = `\r\n      <> a <${DCAT.Catalog}>, <${DCAT.Dataset}> .\r\n\r\n    `\r\n\r\n    for (const triple of triples) {\r\n      let o\r\n      if (triple.object.startsWith(\"http\")) {\r\n        o = `<${triple.object}>`\r\n      } else {\r\n        o = `\"${triple.object}\"`\r\n      }\r\n      data += `<> <${triple.predicate}> ${o} .`\r\n    }\r\n\r\n    await this.dataService.writeFileToPod(Buffer.from(data), this.url, makePublic, \"text/turtle\")\r\n  }\r\n\r\n  public async addMetadata(triples: metadata[]) {\r\n    let query = `INSERT DATA { `\r\n\r\n    for (const triple of triples) {\r\n      let o\r\n      if (triple.object.startsWith(\"http\")) {\r\n        o = `<${triple.object}>`\r\n      } else {\r\n        o = `\"${triple.object}\"`\r\n      }\r\n      query += `<${triple.subject || this.url}> <${triple.predicate}> ${o} .`\r\n    }\r\n\r\n    query += `}`\r\n    await this.update(query)\r\n  }\r\n\r\n  public async getContainment(as: string = \"DCAT\", recursive: boolean = false) {\r\n    return new Promise(async (resolve, reject) => {\r\n      let data\r\n      try {\r\n        switch (as) {\r\n          case \"LDP\":\r\n            data = await this.getContainerStructure(LDP.contains, recursive)\r\n            break;\r\n          default:\r\n            data = await this.getContainerStructure(DCAT.dataset, recursive)\r\n        }\r\n        resolve(data)\r\n      } catch (error) {\r\n        reject(error)\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n  private async getContainerStructure(predicate: string = DCAT.dataset, recursive: boolean = false) {\r\n    let engine\r\n    if (recursive) {\r\n      engine = this.queryEngineRecursive\r\n    } else {\r\n      engine = this.queryEngine\r\n    }\r\n\r\n    let queryStart\r\n    switch (predicate) {\r\n      case LDP.contains:\r\n        queryStart = `CONSTRUCT {\r\n          ?parent <${LDP.contains}> ?child , ?url\r\n        }`\r\n        break;\r\n      default:\r\n        queryStart = `CONSTRUCT {\r\n          ?parent <${DCAT.dataset}> ?child .\r\n          ?parent <${DCAT.distribution}> ?dist .\r\n          ?dist <${DCAT.downloadURL}> ?url\r\n        }`\r\n    }\r\n\r\n    const query = queryStart + `\r\n    WHERE {\r\n      {\r\n        ?parent <${DCAT.dataset}> ?child .\r\n      } UNION {\r\n        ?parent <${DCAT.distribution}> ?dist .\r\n        ?dist <${DCAT.downloadURL}> ?url .\r\n      }\r\n    }`\r\n\r\n    const quadStream = await engine.queryQuads(query, {\r\n      sources: [this.url],\r\n      fetch: this.fetch,\r\n      lenient: true\r\n    });\r\n\r\n    const textStream = rdfSerializer.serialize(quadStream, { contentType: 'text/turtle' });\r\n    const asTtl = await stringifyStream(textStream)\r\n    return asTtl\r\n  }\r\n\r\n  public async addDataset(datasetUrl) {\r\n    let query = `INSERT DATA {<${this.url}> <${DCAT.dataset}> <${datasetUrl}> .}`\r\n    await this.update(query)\r\n  }\r\n\r\n  public async deleteDataset(datasetUrl) {\r\n    const query = `DELETE {<${this.url}> <${DCAT.dataset}> <${datasetUrl}> .}`\r\n    await this.update(query)\r\n  }\r\n\r\n  public async addDistribution(distributionUrl, triples: metadata[] = []) {\r\n    let query = `INSERT DATA {\r\n      <${this.url}> <${DCAT.distribution}> <${distributionUrl}> .\r\n      <${distributionUrl}> <${DCAT.downloadURL}> <${distributionUrl}> .`\r\n\r\n    for (const triple of triples) {\r\n      let o\r\n      if (triple.object.startsWith(\"http\")) {\r\n        o = `<${triple.object}>`\r\n      } else {\r\n        o = `\"${triple.object}\"`\r\n      }\r\n      query += `<${distributionUrl}> <${triple.predicate}> ${o} .`\r\n    }\r\n\r\n    query += `}`\r\n\r\n    await this.update(query)\r\n  }\r\n\r\n  public async deleteDistribution(distributionUrl) {\r\n    const query = `DELETE {\r\n      <${this.url}> <${DCAT.distribution}> <${distributionUrl}> .\r\n      <${distributionUrl}> <${DCAT.downloadURL}> <${distributionUrl}> .\r\n  }`\r\n    await this.update(query)\r\n  }\r\n\r\n  /**\r\n   * @description delete this catalog\r\n   * @returns void\r\n   */\r\n  public async delete() {\r\n    await this.dataService.deleteFile(this.url)\r\n    return\r\n  }\r\n\r\n  /**\r\n   * @description Update the dataset with SPARQL (dangerous - watch out!)\r\n   * @param query The SPARQL query with which to update the dataset\r\n   */\r\n  public async update(query) {\r\n    await this.dataService.sparqlUpdate(this.url, query)\r\n  }\r\n}\r\n\r\n"],"mappings":"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"}